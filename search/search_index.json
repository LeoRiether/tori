{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tori","text":""},{"location":"#the-frictionless-music-player-for-the-terminal","title":"The frictionless music player for the terminal","text":"<p>tori is a terminal-based music player and playlist manager that can play music from local files and external URLs (supported by yt-dlp).</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Plays songs from local files and external URLs</li> <li>Configurable keybinds</li> <li>Filters songs by name, artist or filepath/URL</li> <li>Sorts songs by name or duration</li> <li>Spectrum visualizer</li> </ul>"},{"location":"#alternatives","title":"Alternatives","text":"<ul> <li>musikcube is what I used before writing tori.   It's a great player, but only plays from local files.</li> <li>cmus</li> <li>yewtube</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>All of tori's configuration is defined in $CONFIG_DIR/tori.yaml, where $CONFIG_DIR is, depending on your operating system:</p> Platform Value Example Linux <code>$XDG_CONFIG_HOME</code> or <code>$HOME</code>/.config /home/alice/.config macOS <code>$HOME</code>/Library/Application Support /Users/Alice/Library/Application Support Windows <code>{FOLDERID_LocalAppData}</code> C:\\Users\\Alice\\AppData\\Local"},{"location":"configuration/#commands","title":"Commands","text":"<p>Every configurable action in tori is called a \"command\". A list of your current key bindings can be opened by pressing <code>?</code>. The bindings are in the format <code>&lt;hotkey&gt;: &lt;command&gt;</code>.</p> <p></p> <p>If you want to know what text tori uses to represent a given hotkey (for example, whether it's  'Ctrl+Space', 'C- ' or 'C-space'), use the \"Hotkey Modal\" by pressing <code>!</code> and then the key you want to test.</p> <p></p> <p>The list of all commands can be found at docs.rs.</p>"},{"location":"configuration/#defaults","title":"Defaults","text":"<p>The default directory tori uses to store playlists depends on your OS:</p> Platform Value Example Linux <code>XDG_MUSIC_DIR</code>/tori /home/alice/Music/tori macOS <code>$HOME</code>/Music/tori /Users/Alice/Music/tori Windows <code>{FOLDERID_Music}</code>/tori C:\\Users\\Alice\\Music\\tori <p>Here's the default configuration file:</p> <pre><code>playlists_dir: {audio_dir described in the above table}\nvisualizer_gradient:\n  - [46, 20, 66]\n  - [16, 30, 71]\nkeybindings:\n  '?': OpenHelpModal\n  C-c: Quit\n  C-d: Quit\n  \"&gt;\": NextSong\n  \"&lt;\": PrevSong\n  \" \": TogglePause\n  S-right: SeekForward\n  S-left: SeekBackward\n  o: OpenInBrowser\n  y: CopyUrl\n  t: CopyTitle\n  A-up: VolumeUp\n  A-down: VolumeDown\n  m: Mute\n  v: ToggleVisualizer\n  s: NextSortingMode\n  R: Rename\n  X: Delete\n  S-down: SwapSongDown\n  S-up: SwapSongUp\n  J: SwapSongDown\n  K: SwapSongUp\n  \",\": Shuffle\n  h: SelectLeft\n  j: SelectNext\n  k: SelectPrev\n  l: SelectRight\n  a: Add\n  q: QueueSong\n  C-q: QueueShown\n  p: PlayFromModal\n  E: OpenInEditor\n  '!': OpenHotkeyModal \n</code></pre> <p>You can override shortcuts in your config file, or remove some by binding them to <code>Nop</code> like so:</p> <pre><code>    A-enter: Nop\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installing","title":"Installing","text":"<ul> <li>Make sure you have the dependencies installed</li> <li>Install the Rust toolchain</li> <li>Run <code>cargo install tori</code></li> </ul> <p>Alternatively, if you use an Arch-based Linux distro, you can install tori from the AUR: <code>yay -S tori-bin</code></p> <p>Prebuild binaries for Windows, Mac and other Linux distros will be available soon.</p>"},{"location":"getting_started/#dependencies","title":"Dependencies","text":"<ul> <li>mpv</li> <li>yt-dlp (recommended) or youtube-dl</li> <li>cava (optional) for the visualizer</li> </ul>"},{"location":"getting_started/#yt-dlp","title":"yt-dlp","text":"<p>If you want to use yt-dlp instead of youtube-dl, edit your <code>mpv.conf</code> and paste the following line:</p> <pre><code>script-opts=ytdl_hook-ytdl_path=yt-dlp\n</code></pre> <p>Either this or follow the guide I followed :)</p>"},{"location":"getting_started/#first-steps","title":"First Steps","text":"<p>After installing, you should now be able to run <code>tori</code> in your terminal and be greeted with the main screen:</p> <p></p> <p>You can move focus between the different panes using the arrow keys, or the vim-like keybindings <code>h</code> and <code>l</code>.</p> <p>To add your first playlist, press <code>a</code> to open the add playlist prompt:</p> <p></p> <p>After pressing <code>enter</code>, you should see your playlist added to the list.</p> <p>Now, add a song by focusing the songs pane and pressing <code>a</code> again:</p> <p></p> <p>You have now added your first song! Local files are also accepted, and adding a folder will add all of the songs inside it.</p> <p></p> <p>By default, pressing <code>enter</code> will play the currently selected song (but it will replace anything that's currently playing, to append a song to the queue, press <code>q</code> instead). I also recommend pressing <code>v</code> to enable the visualizer (requires cava to be installed).</p> <p>tori has many configurable commands. You can press <code>?</code> to see the current bindings ~~while listening to some Nhato tunes preferably~~:</p> <p></p>"},{"location":"getting_started/#searching","title":"Searching","text":"<p>Pressing <code>/</code> will enter \"search mode\", which filters songs based on the input. You can also use it on the playlists pane to filter playlists.</p> <p></p> <p><code>esc</code> clears the filter and <code>enter</code> \"commits\" the filter so you can use commands while a filter is active.</p>"}]}